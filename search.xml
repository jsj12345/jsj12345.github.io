<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>openVZ</title>
      <link href="/2023/04/23/openVZ/"/>
      <url>/2023/04/23/openVZ/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h1><h1 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h1><table><thead><tr><th>学号：202000130199</th><th>姓名： 荆树吉</th><th>班级： 20数据</th></tr></thead></table><table><thead><tr><th>实验题目：操作系统虚拟化  OpenVZ</th></tr></thead></table><table><thead><tr><th>实验学时：2</th><th>实验日期： 2023.4.18</th></tr></thead></table><table><thead><tr><th>实验目的：在Linux环境下，熟悉OpenVZ虚拟化。  具体包括：自行了解OpenVZ虚拟化技术，完成实验环境及实验工具的熟悉，包括安装和配置OpenVZ，了解如何创建容器等，撰写实验报告。</th></tr></thead></table><table><thead><tr><th>硬件环境： 联网的计算机一台</th></tr></thead></table><table><thead><tr><th>软件环境：Linux</th></tr></thead></table><h2 id="实验步骤与内容："><a href="#实验步骤与内容：" class="headerlink" title="实验步骤与内容："></a>实验步骤与内容：</h2><h3 id="1-添加源"><a href="#1-添加源" class="headerlink" title="1.添加源"></a>1.添加源</h3><p>vim &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;openvz.list</p><p>写入下面内容保存</p><p>如果需要,可以视情况改动注释.</p><p>deb <a href="http://download.openvz.org/debian">http://download.openvz.org/debian</a> wheezy main</p><p># deb <a href="http://download.openvz.org/debian">http://download.openvz.org/debian</a> wheezy-test main</p><h3 id="2-导入key后更新"><a href="#2-导入key后更新" class="headerlink" title="2.导入key后更新"></a>2.导入key后更新</h3><p>wget <a href="http://ftp.openvz.org/debian/archive.key">http://ftp.openvz.org/debian/archive.key</a></p><p>apt-key add archive.key</p><p>apt update</p><h3 id="3-配置内核参数"><a href="#3-配置内核参数" class="headerlink" title="3. 配置内核参数"></a>3. 配置内核参数</h3><p>vim &#x2F;etc&#x2F;sysctl.conf</p><p>配置这些项:</p><p># On Hardware Node we generally need</p><p># packet forwarding enabled and proxy arp disabled</p><p>net.ipv4.ip_forward &#x3D; 1</p><p>net.ipv6.conf.default.forwarding &#x3D; 1</p><p>net.ipv6.conf.all.forwarding &#x3D; 1</p><p>net.ipv4.conf.default.proxy_arp &#x3D; 0</p><p># Enables source route verification</p><p>net.ipv4.conf.all.rp_filter &#x3D; 1</p><p># Enables the magic-sysrq key</p><p>kernel.sysrq &#x3D; 1</p><p># We do not want all our interfaces to send redirects</p><p>net.ipv4.conf.default.send_redirects &#x3D; 1</p><p>net.ipv4.conf.all.send_redirects &#x3D; 0</p><h3 id="4-让修改立刻生效"><a href="#4-让修改立刻生效" class="headerlink" title="4.让修改立刻生效:"></a>4.让修改立刻生效:</h3><p>sysctl -p</p><h3 id="5-安装64位系统用这个"><a href="#5-安装64位系统用这个" class="headerlink" title="5.安装64位系统用这个"></a>5.安装64位系统用这个</h3><p>apt install -y linux-image-openvz-amd64 vzctl vzquota ploop vzstats</p><h3 id="6-进入openvz内核"><a href="#6-进入openvz内核" class="headerlink" title="6.进入openvz内核"></a>6.进入openvz内核</h3><p>重启,在grub中选择”advance options for ubuntu”进入后可找到带着openvz的行(有可能不止一个,选第一个就是了)</p><h3 id="7-使用"><a href="#7-使用" class="headerlink" title="7.使用"></a>7.使用</h3><p>① 创建并初始化虚拟机</p><p>创建虚拟机需要下载系统模板</p><p>#创建虚拟机,编号102 参数是:虚拟机编号 –ostemplate 系统模板</p><p>vzctl create 102 –ostemplate debian-7.0-x86-minimal</p><p>#设置主机名称</p><p>vzctl set 102 –hostname “vz102” –save</p><p>#限制CPU</p><p>vzctl set 102 –cpuunits 1000 –cpulimit 50 –save</p><p>#限制I&#x2F;O</p><p>vzctl set 102 –iolimit 5M –save</p><p>#设置内存和swap</p><p>vzctl set 102 –ram 64M –swap 0G –save</p><p>#设置硬盘大小 参数:编号 –diskspace 软限制:硬限制 –save</p><p>vzctl set 102 –diskspace 64M:5G –save</p><p>#设置ip</p><p>vzctl set 102 –ipadd 192.168.0.2 –save</p><p>#设定dns服务器</p><p>vzctl set 102 –nameserver 8.8.8.8 –nameserver 8.8.4.4 –save</p><p>#设置root用户密码(需要Cgroup)</p><p>vzctl set 102 –userpasswd root:passwd</p><p>#主机开机时自动运行虚拟机,酌情使用</p><p>vzctl set 102 –onboot yes –save</p><p>② 启动</p><p>vzctl restart 102</p><p>③ 关闭</p><p>vzctl stop 102</p><p>④ 删除</p><p>vzctl destroy 102</p><p>⑤ 查看资源占用</p><p>vzcalc -v 102</p><h3 id="8-网络配置"><a href="#8-网络配置" class="headerlink" title="8.网络配置"></a>8.网络配置</h3><p>#Clear All configure</p><p>iptables -F</p><p>iptables -F -t nat</p><p>#let the computer can to forward data</p><p>iptables -A FORWARD -j ACCEPT</p><p>#这行是打通nat功能,让vps能通过host的ip发送数据到外网,外网也能返回数据,要改两个地方:网卡和最后的ip</p><p>iptables -t nat -A POSTROUTING -o eth0 -j SNAT –to 主机对外的ip</p><p>#这行是端口转发,把ssh端口打通一下</p><p>iptables -t nat -A PREROUTING -p tcp -m tcp –dport 10222 -j DNAT –to-destination 192.168.0.2:22</p><h2 id="结论分析与体会："><a href="#结论分析与体会：" class="headerlink" title="结论分析与体会："></a>结论分析与体会：</h2><p>优势：外面卖的这种类型，许可的内存都超大，CPU也强劲，而且卖家很多，可比性也很强。性价比超高。</p><p>劣势：超卖，没有不超卖的，导致各种石头盘，钻石盘。连带的cpu也被过度分割导致性能升值不如其标明的1&#x2F;10。再有就是内存，基本上OpenVZ技术没有独占的，都是共享，别人多了你就少了，而且这种技术最大的劣势就是内存下来后直接就是当机。还有开设vpn各种不方便</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openVZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境配置</title>
      <link href="/2023/04/18/Docker/"/>
      <url>/2023/04/18/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h1><h1 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h1><table><thead><tr><th>学号：202000130199</th><th>姓名： 荆树吉</th><th>班级： 20 数据</th></tr></thead><tbody><tr><td>实验题目：虚拟化技术练习四Docker</td><td></td><td></td></tr><tr><td>实验学时：2</td><td>实验日期：  2023.4.15</td><td></td></tr></tbody></table><h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h2><p>熟悉Docker虚拟化环境。</p><p>具体包括：了解Docker虚拟化环境的配置和部署，完成实验环境及实验工具的熟悉，包括使用官方镜像运行容器，以及借助官方镜像构建、运行自己的镜像和容器，撰写实验报告。</p><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境:"></a>硬件环境:</h2><p> 联网的计算机一台</p><h2 id="软件环境："><a href="#软件环境：" class="headerlink" title="软件环境："></a>软件环境：</h2><p>.15.0-69-generic #76~20.04.1-Ubuntu SMP Mon Mar 20 15:54:19 UTC 2023 x86_64 x86_64 x86_64 GNU&#x2F;Linux</p><h2 id="实验步骤与内容："><a href="#实验步骤与内容：" class="headerlink" title="实验步骤与内容："></a>实验步骤与内容：</h2><ol><li><h3 id="了解Docker虚拟化环境的配置和部署"><a href="#了解Docker虚拟化环境的配置和部署" class="headerlink" title="了解Docker虚拟化环境的配置和部署"></a>了解Docker虚拟化环境的配置和部署</h3><p>sudo apt-get -y install docker.io</p><p>安装完成后执行 docker，表明安装成功。</p><p>sudo docker pull ubuntu</p><p>安装完成之后默认会启动docker服务，如果没有启动和正常服务一样启动就好</p><p>docker version</p><p><img src="/2023/04/18/Docker/clip_image002.png" alt="docker version"></p></li><li><h3 id="使用官方镜像运行容器"><a href="#使用官方镜像运行容器" class="headerlink" title="使用官方镜像运行容器"></a>使用官方镜像运行容器</h3><p>查看下载到本地的所有镜像</p><p>docker images</p><p><img src="/2023/04/18/Docker/clip_image002-1681821166374-16.png" alt="docker images"></p><p> 查看容器</p><p> docker ps -a</p><p><img src="/2023/04/18/Docker/clip_image004.png" alt="查看容器"></p><p>删除镜像</p><p>docker rmi +镜像名</p><p>docker rmi +镜像标签</p><p><img src="/2023/04/18/Docker/clip_image006.png" alt="删除镜像"></p><p>下载镜像</p><p>docker pull +镜像名</p><p><img src="/2023/04/18/Docker/clip_image008.png" alt="下载镜像"></p><p>查看是否拉入镜像</p><p><img src="/2023/04/18/Docker/clip_image010.png" alt="查看是否拉入镜像"></p><p>已拉入</p><p>创建容器</p><p>docker create -it cengos:7 &#x2F;bin&#x2F;bash  &#x2F;&#x2F;创建一个新的容器但不启动它 #&#x2F;bin&#x2F;bash 交互   对应的镜像名</p><p>#选项：</p><p>-i ：  让容器的标准输入保持打开</p><p>-t ：  分配一个伪终端</p><p>-d ：  后台守护进程的方式运行</p><p>#去查询容器会发现状态为Created</p><p><img src="/2023/04/18/Docker/clip_image012.png" alt="查看容器"></p><p>启动容器</p><p>docker start 容器ID</p><p>打开刚刚创建的容器</p><p><img src="/2023/04/18/Docker/clip_image014.png" alt="启动容器"></p><p>停止容器</p><p>docker stop 容器id</p><p>停止刚刚打开的容器</p><p><img src="/2023/04/18/Docker/clip_image016.png" alt="停止容器"></p><p>容器已经被停止</p></li><li><h3 id="借助官方镜像构建、运行自己的镜像和容器"><a href="#借助官方镜像构建、运行自己的镜像和容器" class="headerlink" title="借助官方镜像构建、运行自己的镜像和容器"></a>借助官方镜像构建、运行自己的镜像和容器</h3><h4 id="①-建立dockerfile文件"><a href="#①-建立dockerfile文件" class="headerlink" title="① 建立dockerfile文件"></a>① 建立dockerfile文件</h4><p>（1） 新建工作目录dockertest，并新建Dockerfile。使用的命令如下：</p><p>mkdir dockertest</p><p>cd dockertest</p><p>touch Dockerfile </p><p>​       使用ls查看当前目录下的文件</p><p>​        <img src="/2023/04/18/Docker/clip_image002-1681821353211-25.png" alt="查看当前文件"></p><p>（2） 使用vim编辑Dockerfile</p><p><img src="/2023/04/18/Docker/clip_image004-1681821353212-26.png" alt="vim编辑Dockerfile"></p><p>其中，</p><p>  FROM ：定制的镜像都是基于 FROM 的镜像，也就是说，你的docker容器的系统。这里用的是ubuntu:latest，详细用法不再这里介绍，你可以在dockerhub上找其他的镜像。</p><p>  WORKDIR：你的工作目录，当你运行容器后，是一个ubuntu系统，在根目录会建立一个Mydata的目录。</p><p>  RUN：你可以暂且理解为制定镜像时，为ubuntu系统配置环境，安装一些包的命令执行过程。这里的run是我要配置一个opencv环境所要进行的操作，你可以按照你自己的需求来。</p><p>  CMD：执行docker run时默认执行的命令，docker在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 &#x2F;bin&#x2F;bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat &#x2F;etc&#x2F;os-release。这就是用 cat &#x2F;etc&#x2F;os-release 命令替换了默认的 &#x2F;bin&#x2F;bash 命令了，输出了系统版本信息。</p><h4 id="②-制作docker镜像"><a href="#②-制作docker镜像" class="headerlink" title="② 制作docker镜像"></a>② 制作docker镜像</h4><p>在有Dockfile的这个目录下，执行该命令:</p><p>​    sudo docker build -t ubuntudocker:new .</p><p>​    由于自建的镜像较大，故只提供部分截图</p><p>​    <img src="/2023/04/18/Docker/clip_image002-1681821409004-29.png" alt="建立镜像"></p><p>​     可以使用下面的命令浏览有哪些镜像：</p><p><img src="/2023/04/18/Docker/clip_image004-1681821409005-30.png" alt="浏览镜像"></p><h4 id="③运行docker容器"><a href="#③运行docker容器" class="headerlink" title="③运行docker容器"></a>③运行docker容器</h4><p><img src="/2023/04/18/Docker/clip_image002-1681821468607-33.png" alt="运行并使用容器"></p><p>内部容器已经可以使用python3.10.6环境</p><p>打包镜像同上</p></li></ol><h2 id="结论分析与体会："><a href="#结论分析与体会：" class="headerlink" title="结论分析与体会："></a>结论分析与体会：</h2><p>docker是一种轻量级的虚拟机，docker是一个用于开发、交付、和运行应用程序的开放平台。</p><p>在linux容器里运行的开源工具：容器引擎，让开发者可以打包大量的应用及依赖包到一个可移植的镜像中，然后发布到任何流行的linux或者window机器中</p><p>进行实验的过程中需要不断的安装新的环境，要注意环境的兼容性</p><p>自己镜像的创建很费时间</p><p>docker引擎统一了基础设施环境–docker环境</p><p>docker引擎统一了程序打包（装箱）方式，docker镜像（把引擎放在镜像中，带着经i选哪个到处跑</p><p>docker引擎统一了程序部署（运行）方式–docker容器（利用引擎把这个镜像再去运行为之前的一摸一样的容器）</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM环境配置</title>
      <link href="/2023/04/16/KVM/"/>
      <url>/2023/04/16/KVM/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h1><h2 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h2><table><thead><tr><th>学号：</th><th>姓名：</th><th>班级：</th></tr></thead><tbody><tr><td>202000130199</td><td>荆树吉</td><td>20数据</td></tr></tbody></table><table><thead><tr><th>实验题目：虚拟化技术练习三KVM</th><th></th></tr></thead><tbody><tr><td>实验学时：2</td><td>实验日期：  2023.4.8</td></tr></tbody></table><h3 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h3><p>在Linux环境下，熟悉KVM虚拟化环境。</p><p>具体包括：了解KVM虚拟化环境的配置和部署，完成实验环境及实验工具的熟悉，撰写实验报告。</p><h3 id="硬件环境："><a href="#硬件环境：" class="headerlink" title="硬件环境："></a>硬件环境：</h3><p>联网的计算机一台</p><h3 id="软件环境："><a href="#软件环境：" class="headerlink" title="软件环境："></a>软件环境：</h3><p>Linux</p><h3 id="实验步骤与内容："><a href="#实验步骤与内容：" class="headerlink" title="实验步骤与内容："></a>实验步骤与内容：</h3><h4 id="一．先决条件"><a href="#一．先决条件" class="headerlink" title="一．先决条件"></a>一．先决条件</h4><p>要运行带有2 GB以上RAM的guest虚拟机，对应的虚拟环境必须拥有64位主机系统</p><p>再继续安装之前，要确保对应的ubundu虚拟机支持KVM虚拟化，系统应具有VT-x(vmx)的Intel处理器或具有AMD-V(svm)技术的AMD处理器。</p><p>以下grep命令以验证您的处理器支持硬件虚拟化：</p><p>grep -Eoc ‘(vmx|svm)’ &#x2F;proc&#x2F;cpuinfo</p><p>如果CPU支持硬件虚拟化，则该命令将输出一个大于零的数字，即CPU核心的数量。否则，如果输出是，0则表示CPU不支持硬件虚拟化。比如我对应的输出结果就是4</p><p>在某些计算机上，制造商可能会在BIOS中禁用虚拟技术扩展。</p><p>要检查BIOS中是否启用了VT，请使用kvm-ok软件包中随附的工具。以超级用户或具 有sudo特权的用户身份输入以下命令来安装cpu-checker包含该kvm-ok命令的软件包：</p><p>   sudo apt update</p><p>sudo apt install cpu-checker</p><p>安装完成后，检查我的系统是否可以运行硬件加速的KVM虚拟机：</p><p>kvm-ok</p><p>如果未在BIOS中禁用处理器虚拟化功能，则输出将如下所示：</p><p>INFO: &#x2F;dev&#x2F;kvm exists</p><p>KVM acceleration can be used</p><h4 id="二．在Ubuntu-20-04上安装KVM"><a href="#二．在Ubuntu-20-04上安装KVM" class="headerlink" title="二．在Ubuntu 20.04上安装KVM"></a>二．在Ubuntu 20.04上安装KVM</h4><p>运行以下命令以安装KVM和其他虚拟化管理软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager</span><br></pre></td></tr></table></figure><p>qemu-kvm -为KVM管理程序提供硬件仿真的软件。</p><p>libvirt-daemon-system -用于将libvirt守护程序作为系统服务运行的配置文件。</p><p>libvirt-clients -用于管理虚拟化平台的软件。</p><p>bridge-utils -一组用于配置以太网桥的命令行工具。</p><p>virtinst -一组用于创建虚拟机的命令行工具。</p><p>virt-manager -易于使用的GUI界面和支持命令行工具，用于通过libvirt管理虚拟机。</p><p>安装软件包后，libvirt守护程序将自动启动。您可以通过键入以下内容进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl is-active libvirtd</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">active</span><br></pre></td></tr></table></figure><p>为了能够创建和管理虚拟机，需要将用户添加到“ libvirt”和“ kvm”组中。为此，请输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG libvirt <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line">sudo usermod -aG kvm <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>$USER 是一个环境变量，其中包含当前登录用户的名称。</p><p>注销并重新登录，以便刷新组成员身份。</p><h4 id="三．网络设置"><a href="#三．网络设置" class="headerlink" title="三．网络设置"></a>三．网络设置</h4><p>在安装过程中会创建一个名为“ virbr0”的网桥。该设备使用NAT将来宾计算机连接到外界。</p><p>可以使用该brctl工具列出当前网桥及其连接的接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brctl show</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="/2023/04/16/KVM/clip_image002.png" alt="img"></p><p>“ virbr0”网桥未添加任何物理接口。“ virbr0-nic”是虚拟设备，没有流量通过该虚拟设备。该设备的唯一目的是避免更改“ virbr0”网桥的MAC地址。</p><p>此网络设置适用于大多数Ubuntu桌面用户，但有局限性。如果要从本地网络外部访问来宾，则需要创建一个新的网桥并对其进行配置，以便来宾计算机可以通过主机物理接口连接到外部世界</p><h4 id="四．创建虚拟机"><a href="#四．创建虚拟机" class="headerlink" title="四．创建虚拟机"></a>四．创建虚拟机</h4><p>现在，我的Ubuntu桌面上已安装了KVM，您可以创建第一个VM。可以从命令行或使用virt-manager应用程序完成此操作。</p><p>下载要安装的操作系统的ISO映像，然后按照以下步骤创建虚拟机：</p><p>  我所选择的对应的ISO映像是</p><p>  CentOS-7.5-x86_64-DVD-1804.iso</p><ol><li><p>使用virt-manager打开对应的应用程序</p></li><li><p>启动应用程序后，从顶部菜单中单击“File”-&gt;“New Virtual Machine”：<img src="/2023/04/16/KVM/clip_image002-1681637740764-2.png" alt="img"></p></li><li><p>将会出现一个新窗口。选择“Local install media(ISO image or CDROM”，然后单击“Forward”按钮。<img src="/2023/04/16/KVM/clip_image004.png" alt="img"></p></li><li><p>提供ISO映像路径，然后单击“Forward”按钮。</p></li><li><p>在下一个屏幕中，选择VM的内存和CPU设置。单击前进。由于我的linux环境是对应的虚拟机，所以对应的内存我就没做具体设置，没有分配磁盘空间</p></li><li><p>接下来，选择“为虚拟机创建磁盘映像”，然后选择VM的磁盘空间大小。单击前进</p></li><li><p>输入您的虚拟机名称的名称，然后单击“完成”。</p></li><li><p>VM将启动，并打开一个新窗口：对应的KVM虚拟机是可以和一般的centos系统进行相同的操作，以下为对应的centos系统配置结果</p></li></ol><p><img src="/2023/04/16/KVM/clip_image002-1681637784065-5.png" alt="img"></p><p>KVM配置完成。</p><h3 id="结论分析与体会："><a href="#结论分析与体会：" class="headerlink" title="结论分析与体会："></a>结论分析与体会：</h3><p>对应的虚拟机的apt安装是需要设置一下的</p><p>KVM（基于内核的虚拟机）是内置在Linux内核中的开源虚拟化技术。本实验结果提供有关如何在Ubuntu 20.04桌面上安装和配置KVM的说明。我们还将向您展示如何创建可用作不同应用程序开发环境的虚拟机。</p><p>KVM（基于内核的虚拟机）是内置在Linux内核中的开源虚拟化技术。用KVM运行多个Linux或Windows来宾虚拟机。每个来宾都彼此完全隔离，并具有自己的操作系统和专用的虚拟硬件，例如CPU，内存，网络接口和存储。</p><p>本实验提供有关如何在Ubuntu 20.04桌面上安装和配置KVM的说明。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp05</title>
      <link href="/2023/04/11/nlp05/"/>
      <url>/2023/04/11/nlp05/</url>
      
        <content type="html"><![CDATA[<h2 id="实验5-词向量"><a href="#实验5-词向量" class="headerlink" title="实验5 词向量"></a>实验5 词向量</h2><h4 id="1-One-hot编码实验"><a href="#1-One-hot编码实验" class="headerlink" title="1.One-hot编码实验"></a>1.One-hot编码实验</h4><h5 id="1-1-实验介绍"><a href="#1-1-实验介绍" class="headerlink" title="1.1 实验介绍"></a>1.1 实验介绍</h5><p>One-hot编码也称之为独热编码，是NLP里的经常在预处理数据的时候使用的技术。通常是需要将离散型特征或者标签用One-hot编码。比如房价预测中，出现房屋朝向的特征，一共有南、东南、西南、东、东北、北、西北和西8个方向，那么这样的离散特征是需要One-hot编码的，比如“南”的one-hot编码为[1,0,0,0,0,0,0,0]，“东南”的One-hot编码为[0,1,0,0,0,0,0,0]…依此类推。</p><h4 id="1-2-实验要求"><a href="#1-2-实验要求" class="headerlink" title="1.2 实验要求"></a>1.2 实验要求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="string">&#x27;体育&#x27;</span>, <span class="string">&#x27;军事&#x27;</span>, <span class="string">&#x27;娱乐&#x27;</span>, <span class="string">&#x27;教育&#x27;</span>, <span class="string">&#x27;文化&#x27;</span>, <span class="string">&#x27;时尚&#x27;</span>, <span class="string">&#x27;科技&#x27;</span>, <span class="string">&#x27;财经&#x27;</span>]</span><br><span class="line">onehot_encode(x)</span><br></pre></td></tr></table></figure><p>编写onehot_encode函数，生成效果如下：</p><p><img src="/2023/04/11/nlp05/image-20210304202934556.png" alt="image-20210304202934556"></p><p><strong>提示</strong>：可以使用sklearn.preprocessing中的OneHotEncoder</p><h5 id="1-3-思考题"><a href="#1-3-思考题" class="headerlink" title="1.3 思考题"></a>1.3 思考题</h5><p>从one-hot编码结果来看，one-hot编码的缺点是什么？</p><h4 id="2-Word2vec词向量训练"><a href="#2-Word2vec词向量训练" class="headerlink" title="2.Word2vec词向量训练"></a>2.Word2vec词向量训练</h4><p>Word2vec是Google在2013年开源的一款用于词向量计算的工具，一经发布就引起了工业界和学术界的关注。首先，Word2vec可以在百万数量级的词典和上亿的数据集上进行高效地训练；其次，该工具训练得到的词向量（word embedding），可以很好地度量词与词之间的相似性。Word2vec不是一种深度学习算法，其后面只是一个浅层神经网络，包含两种模型：CBOW模型和Skip-gram模型。</p><p>本实验主要是基于Python和gensim框架实现Word2vec在Wikipedia语料集上面的应用，并且获取词的词向量以及寻找相近词。</p><h5 id="2-1-数据集"><a href="#2-1-数据集" class="headerlink" title="2.1 数据集"></a>2.1 数据集</h5><p>数据来源于维基语料</p><p>数据链接：<a href="https://icloud.qd.sdu.edu.cn:7777/link/28AA675BD5725B6D09B317234579B273">https://icloud.qd.sdu.edu.cn:7777/link/28AA675BD5725B6D09B317234579B273</a><br>有效期限：2021-05-20</p><p>共计33w条数据，数据太大，可以取10w条（或5w，数据量太小容易导致训练结果不佳）进行实验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据处理部分</span></span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> WikiCorpus</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">import</span> zhconv <span class="comment">#繁体字简体字转换</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line">input_file_name = <span class="string">&#x27;zhwiki-latest-pages-articles.xml.bz2&#x27;</span></span><br><span class="line">output_file_name = <span class="string">&#x27;corpus_cn.txt&#x27;</span></span><br><span class="line"><span class="comment">#加载数据</span></span><br><span class="line">input_file = WikiCorpus(input_file_name, lemmatize=<span class="literal">False</span>, dictionary=&#123;&#125;)</span><br><span class="line"><span class="comment">#将lemmatize设置为False的主要目的是不使用pattern模块来进行英文单词的词干化处理，无论你的电脑#是否已经安装了pattern，因为使用pattern会严重影响这个处理过程，变得很慢</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line"><span class="comment">#使用WikiCorpus类中的get_texts()方法读取文件，每篇文章转换为一行文本，并去掉标签符号等内容</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> input_file.get_texts():</span><br><span class="line">        output_file.write(<span class="string">&#x27; &#x27;</span>.join(text) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已处理%d条数据&#x27;</span> % count)            </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;处理完成！&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#查看处理结果</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;corpus_cn.txt&#x27;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.readlines()[:<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h5 id="2-2-基本步骤"><a href="#2-2-基本步骤" class="headerlink" title="2.2 基本步骤"></a>2.2 基本步骤</h5><ol><li><p><strong>预处理</strong>：包括繁体-&gt;简体转换，分词，去除非中文词等主要步骤。</p></li><li><p><strong>训练词向量</strong>：使用gensim训练并保存model。</p></li><li><p><strong>加载模型并测试效果</strong>：如查看词汇的词向量，获取与某词汇最相关的n个词。</p></li></ol><p>例如：<img src="/2023/04/11/nlp05/image-20210304213009944.png" alt="image-20210304213009944"></p>]]></content>
      
      
      <categories>
          
          <category> nlp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词向量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机网络配置和共享文件夹</title>
      <link href="/2023/04/03/4/"/>
      <url>/2023/04/03/4/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h1><h1 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h1><table><thead><tr><th align="center">学号：202000130199</th><th>姓名： 荆树吉</th><th>班级： 20数据</th><th></th></tr></thead><tbody><tr><td align="center">实验题目：虚拟化技术练习一VMware</td><td></td><td></td><td></td></tr><tr><td align="center">实验学时：2</td><td>实验日期：</td><td></td><td></td></tr><tr><td align="center">实验目的：在Linux环境下，熟悉VMware虚拟化环境。  具体包括：了解VMware虚拟化环境的配置和部署，并配置网络连接，使其能够与本地计算机互相通信；在虚拟机中创建一个共享文件夹，使得本地计算机能够访问该共享文件夹，撰写实验报告。</td><td></td><td></td><td></td></tr><tr><td align="center">硬件环境：   联网的计算机一台</td><td></td><td></td><td></td></tr><tr><td align="center">软件环境：  Linux</td><td></td><td></td><td></td></tr><tr><td align="center">实验步骤与内容：  1. 安装VWware Workstation  官方正版VMware下载（16 pro）：我用的是阿里云盘传输下载，速度较快    下载Linux系统镜像，来源同上    安装：选一下安装地址，一直下一步即可。  <img src="/2023/04/03/4/clip_image002.jpg" alt="img">  新建虚拟机  现在我们就相当于买电脑，先把电脑配置整好。什么cpu啊内存条啊硬盘啊什么乱七八糟的，先不着急装系统。  Linux版本选的是GenOS7 64位。  一路默认  地址选在D盘  安装操作系统 选择镜像位置然后确认  打开虚拟机 读完秒后  选择简体中文  修改安装方式 选择GNOME桌面然后点完成  然后加一个默认的安装位置  开启网络连接  设置root密码和用户名密码  安装后重启 接受协议  安装配置进入界面  2. 并配置网络连接，使其能够与本地计算机互相通信  打开虚拟网络编辑器打开NAT模式  <img src="/2023/04/03/4/clip_image004.png" alt="img">  在面板-》虚拟机-》配置（一定要选择某台虚拟机，否则设置会变为灰色）  <img src="/2023/04/03/4/clip_image006.png" alt="img">  虚拟机内设置IP&#x2F;静态&#x2F;网关&#x2F;DNS  主机VMnet8的IP  <img src="/2023/04/03/4/clip_image008.png" alt="img">  主机连接网络的DNS(软件网络服务)     <img src="/2023/04/03/4/clip_image010.png" alt="img">  虚拟机内IP相关配置设置  vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33  例如：  6.重启network服务,配置生效  双方可ping通  网络连接完成     3.设置共享文件夹  选择待处理虚拟机，右键设置  在虚拟机设置 窗口：选择 选项–》点击 共享文件夹；文件夹共享 选择总是启用     在文件夹 ：添加共享目录； 弹出窗口 点击下一步–》设置共享文件夹目录 地址、共享文件夹名称 —》启用此共享 –》完成。 虚拟机设置完成。  <img src="/2023/04/03/4/clip_image012.png" alt="img">  3. 挂载  上述步骤完毕后，CentOS6会自动在&#x2F;mnt目录下挂载共享目录，但是CentOS7需要手动挂载。     1、在Centos 桌面打开终端（或者使用 XShell ：直接连接上就好)     2、查看共享目录情况  命令： vmware-hgfsclient  如果这是第一次设置共享目录， centos 7 需要创建文件夹在 &#x2F;mnt 下创建 &#x2F;hgfs  自动挂载：让虚拟机系统每次启动完成，自动挂载虚拟机已经设置的共享目录。在&#x2F;etc&#x2F;fstab文件中添加挂载目录  在打开的文件中 添加 ：  .host:&#x2F;共享文件名  &#x2F;mnt&#x2F;hgfs fuse.vmhgfs-fuse allow_other,defaults 0 0　  mount -a生效</td><td></td><td></td><td></td></tr><tr><td align="center">结论分析与体会：  采用ubundu虚拟机会找不到对应的  网络配置的文件ens33  应该选择cento的linux系统  方可实现主机和虚拟机之间的联系</td><td></td><td></td><td></td></tr><tr><td align="center"></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序设计第五周验收报告</title>
      <link href="/2023/03/26/compu/"/>
      <url>/2023/03/26/compu/</url>
      
        <content type="html"><![CDATA[<h1 id="第五周验收报告"><a href="#第五周验收报告" class="headerlink" title="第五周验收报告"></a>第五周验收报告</h1><h2 id="一-简答"><a href="#一-简答" class="headerlink" title="一.简答"></a>一.简答</h2><h3 id="1-给定⼀个⼗进制正整数a，如何将⼆进制下a的第i位取反？（0变成1-1变成0，例如⼗进制下11，-⼆进制为1011，将第2位取反为1001，结果化成⼗进制为9）"><a href="#1-给定⼀个⼗进制正整数a，如何将⼆进制下a的第i位取反？（0变成1-1变成0，例如⼗进制下11，-⼆进制为1011，将第2位取反为1001，结果化成⼗进制为9）" class="headerlink" title="1.给定⼀个⼗进制正整数a，如何将⼆进制下a的第i位取反？（0变成1,1变成0，例如⼗进制下11， ⼆进制为1011，将第2位取反为1001，结果化成⼗进制为9）"></a>1.给定⼀个⼗进制正整数a，如何将⼆进制下a的第i位取反？（0变成1,1变成0，例如⼗进制下11， ⼆进制为1011，将第2位取反为1001，结果化成⼗进制为9）</h3><p>因为其他的位数是不变的，所以可以取一个数，这个数的其他位都是0，而只有第i位是1，所以其他位数与0按位异或都会形成数的本身，而第i位是1，所以这一位就会被取反，再将这样的一个二进制数，转化成十进制数，这个十进制数和原十进制数进行按位异或，a^b,最终的结果就是将二进制数字的第i位取反；</p><h3 id="2-如何分析单调栈和单调队列的复杂度？"><a href="#2-如何分析单调栈和单调队列的复杂度？" class="headerlink" title="2.如何分析单调栈和单调队列的复杂度？"></a>2.如何分析单调栈和单调队列的复杂度？</h3><p>单调栈是在栈的基础上进行元素大小的约束，故通过单调栈应当经过几轮比较，假设比较的次数是m次，而假设一共有n个数，故在加入的过程中的时间复杂的为O(m,n);而在利用这些值的时候的复杂度是O(n);</p><p>单调队列只是能够双端输入输出，故这两个数据结构是复杂度相同的。</p><h2 id="二-作业H5"><a href="#二-作业H5" class="headerlink" title="二.作业H5"></a>二.作业H5</h2><h3 id="1-请给出-旅途不⽌-的实验报告"><a href="#1-请给出-旅途不⽌-的实验报告" class="headerlink" title="1.请给出 旅途不⽌ 的实验报告"></a>1.请给出 旅途不⽌ 的实验报告</h3><h4 id="题⽬⼤意："><a href="#题⽬⼤意：" class="headerlink" title="题⽬⼤意："></a>题⽬⼤意：</h4><p><img src="/2023/03/26/compu/1.png"></p><p><img src="/2023/03/26/compu/2.png"></p><p><img src="/2023/03/26/compu/3.png"></p><h4 id="解法：-（描述你实现当前题⽬的思路，要逻辑清晰，语⾔凝练）"><a href="#解法：-（描述你实现当前题⽬的思路，要逻辑清晰，语⾔凝练）" class="headerlink" title="解法： （描述你实现当前题⽬的思路，要逻辑清晰，语⾔凝练）"></a>解法： （描述你实现当前题⽬的思路，要逻辑清晰，语⾔凝练）</h4><p>1.定义一堆素数的集合，因为1&lt;&#x3D;c&lt;&#x3D;100,所以在任何一个数的拆解过程中，都不会出现比97更大的素数因子，故取0-100之间的素数就可以；</p><p>2.定义快速幂函数；已解决long long 型数字爆炸；</p><p>3.输入应该输入的变量</p><p>4.定义num数组用于存储在数组中的每个数拆解后每个素数的次数，此次数利用差分法，即真正的次数是定义的num数组的前一项加上本数组元素</p><p>5.定义minum数组，用于存储每一个素数在每一个数组元素中的次数最小值。</p><p>6.输入m组数据，遍历每一个素数，对于范围内的数字进行分解，一个素数一个素数的拆解，最终就能完整地拆解出每一个数据。</p><p>7.初始化minum是每一个素数的最小次数，都当成第一二个数字拆解出来的该素数的次数。</p><p>8.还原num使其成为真正的次数，并且对每一个数字的同一个素数因子的次数进行比较，找到每一个素数在每一个数组元素中的次数最小值。</p><p>9.利用快速幂计算出最大公因数</p><h4 id="时间复杂度：-（先给出题⽬的时间复杂度，再分析为什么是这个时间复杂度）"><a href="#时间复杂度：-（先给出题⽬的时间复杂度，再分析为什么是这个时间复杂度）" class="headerlink" title="时间复杂度： （先给出题⽬的时间复杂度，再分析为什么是这个时间复杂度）"></a>时间复杂度： （先给出题⽬的时间复杂度，再分析为什么是这个时间复杂度）</h4><p>总体O(25*m);</p><p>25个素数，m次操作。</p><p>但在分解的过程中的时间复杂度是不确定的</p><h4 id="代码：-（请给出解题的代码，在关键的位置要带有注释，注释不要每⾏都写，但是⼀定要让阅读⼈了解你的-意图，这会成为评价的重要指标）"><a href="#代码：-（请给出解题的代码，在关键的位置要带有注释，注释不要每⾏都写，但是⼀定要让阅读⼈了解你的-意图，这会成为评价的重要指标）" class="headerlink" title="代码： （请给出解题的代码，在关键的位置要带有注释，注释不要每⾏都写，但是⼀定要让阅读⼈了解你的 意图，这会成为评价的重要指标）"></a>代码： （请给出解题的代码，在关键的位置要带有注释，注释不要每⾏都写，但是⼀定要让阅读⼈了解你的 意图，这会成为评价的重要指标）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,l,r,c;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b;</span><br><span class="line"><span class="type">int</span> primenumber[<span class="number">25</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>&#125;;</span><br><span class="line"><span class="comment">//1.定义一堆素数的集合，因为1&lt;=c&lt;=100,所以在任何一个数的拆解过程中，都不会出现比97更大的素数因子，故取0-100之间的素数就可以；</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">poww</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,<span class="type">long</span> <span class="type">long</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//2.定义快速幂函数；已解决long long 型数字爆炸；</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=res*a%m;</span><br><span class="line">&#125;</span><br><span class="line">a=a*a%m;</span><br><span class="line">b=b&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);<span class="comment">//3.输入应该输入的变量</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num[n+<span class="number">2</span>][<span class="number">25</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//4.定义num数组用于存储在数组中的每个数拆解后每个素数的次数，此次数利用差分法，即真正的次数是定义的num数组的前一项加上本数组元素</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> minum[<span class="number">25</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//5.定义minum数组，用于存储每一个素数在每一个数组元素中的次数最小值。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">cin&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">25</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;primenumber[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(c%primenumber[j]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">num[l][j]+=b;</span><br><span class="line">num[r+<span class="number">1</span>][j]-=b;</span><br><span class="line">c/=primenumber[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.输入m组数据，遍历每一个素数，对于范围内的数字进行分解，一个素数一个素数的拆解，最终就能完整地拆解出每一个数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.初始化minum是每一个素数的最小次数，都当成第一二个数字拆解出来的该素数的次数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//8.还原num使其成为真正的次数，并且对每一个数字的同一个素数因子的次数进行比较，找到每一个素数在每一个数组元素中的次数最小值。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">minum[i]=num[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">    num[j][i]=num[j][i]+num[j<span class="number">-1</span>][i];</span><br><span class="line">    minum[i]=<span class="built_in">min</span>(num[j][i],minum[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> result=<span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">//9.利用快速幂计算出最大公因数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">result=result*<span class="built_in">poww</span>(primenumber[i],minum[i],k)%k;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境基本操作练习</title>
      <link href="/2023/03/22/1/"/>
      <url>/2023/03/22/1/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学实验报告-1"><a href="#山东大学实验报告-1" class="headerlink" title="山东大学实验报告 1"></a>山东大学实验报告 1</h1><h2 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h2><h2 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h2><p><strong>学号：202000130199  |姓名：荆树吉 |  班级：20数据</strong></p><h3 id="实验题目：Linux环境基本操作练习"><a href="#实验题目：Linux环境基本操作练习" class="headerlink" title="实验题目：Linux环境基本操作练习"></a>实验题目：Linux环境基本操作练习</h3><h3 id="实验学时：2"><a href="#实验学时：2" class="headerlink" title="实验学时：2"></a>实验学时：2</h3><h3 id="实验日期：-2023-2-25"><a href="#实验日期：-2023-2-25" class="headerlink" title="实验日期：  2023.2.25"></a>实验日期：  2023.2.25</h3><h3 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h3><p>在Linux环境下，熟悉基本的文件操作和命令</p><p>具体包括：了解Linux，浏览文件、创建文件、安装一个程序、了解Python、C++等常用编程环境</p><h3 id="硬件环境："><a href="#硬件环境：" class="headerlink" title="硬件环境："></a>硬件环境：</h3><p>计算机一台</p><h3 id="软件环境："><a href="#软件环境：" class="headerlink" title="软件环境："></a>软件环境：</h3><p>Linux</p><h3 id="实验步骤与内容："><a href="#实验步骤与内容：" class="headerlink" title="实验步骤与内容："></a>实验步骤与内容：</h3><h4 id="1-了解linux"><a href="#1-了解linux" class="headerlink" title="1.了解linux"></a>1.了解linux</h4><p>Linux，全称GNU&#x2F;Linux，是一种免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年10月5日首次发布，它主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、Oracle Linux等。</p><h4 id="2-浏览文件和创建文件"><a href="#2-浏览文件和创建文件" class="headerlink" title="2.浏览文件和创建文件"></a>2.浏览文件和创建文件</h4><p>ls可以浏览当前文件夹的所有文件vi可以浏览文件之间的具体内容</p><p><img src="/2023/03/22/1/1.png" alt="1.浏览文件夹内容"></p><p>vi test</p><p><img src="/2023/03/22/1/2.png" alt="2.浏览文件内容"></p><h4 id="3-安装程序"><a href="#3-安装程序" class="headerlink" title="3.安装程序"></a>3.安装程序</h4><h5 id="一、-源码编译安装（二进制安装）"><a href="#一、-源码编译安装（二进制安装）" class="headerlink" title="一、 源码编译安装（二进制安装）"></a>一、 源码编译安装（二进制安装）</h5><p>程序：由开发人员写代码一个一个单词敲出来的</p><p>源码：编写好的.c.java文件</p><p>编译：将人类写的代码翻译成二进制语言</p><p>安装：将二进制保存在键盘上</p><p>缺点：</p><p> 如果编译出了问题，你不懂源代码，无法解决</p><p>安装过程复杂</p><p>没有统一的管理人员</p><p>优点：</p><p> 契合系统，兼容性强</p><p>如果你可以看懂源代码，修改新增功能</p><p>比较自由</p><h5 id="二、rpm安装（安装包管理工具）"><a href="#二、rpm安装（安装包管理工具）" class="headerlink" title="二、rpm安装（安装包管理工具）"></a>二、rpm安装（安装包管理工具）</h5><p>优点：</p><p> 统一的安装包格式</p><p>已经帮你编译完成</p><p>使用简单</p><p>缺点：</p><p> 有依赖关系（安装 a ，就需要先安装别的）</p><p>查询（对已安装程序查询）</p><p>查看系统已安装的所有软件（-qa）</p><h4 id="4-c-和python的利用-vscode"><a href="#4-c-和python的利用-vscode" class="headerlink" title="4 .c++,和python的利用 vscode"></a>4 .c++,和python的利用 vscode</h4><h5 id="1-c-代码"><a href="#1-c-代码" class="headerlink" title="1.c++代码"></a>1.c++代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,X,Y;</span><br><span class="line"><span class="type">int</span> x[<span class="number">202</span>],y[<span class="number">202</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">d</span>&#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d node[<span class="number">202</span>];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;X&gt;&gt;Y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">        node[i].dis=(x[i]-X)*(x[i]-X)+(y[i]-Y)*(y[i]-Y);</span><br><span class="line">        node[i].no=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((node[i].dis&gt;node[j].dis)||((node[i].dis==node[j].dis)&amp;&amp;(node[i].no&gt;node[j].no)))</span><br><span class="line">            &#123;</span><br><span class="line">               t=node[i].dis;</span><br><span class="line">               node[i].dis=node[j].dis;</span><br><span class="line">               node[j].dis=t;</span><br><span class="line">               k=node[i].no;</span><br><span class="line">               node[i].no=node[j].no;</span><br><span class="line">               node[j].no=k;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;node[i].dis&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;node[i].no&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;node[<span class="number">0</span>].no+<span class="number">1</span>&lt;&lt;endl&lt;&lt;node[<span class="number">1</span>].no+<span class="number">1</span>&lt;&lt;endl&lt;&lt;node[<span class="number">2</span>].no+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给出一个点的坐标和其他的点的个数</p><p>再给出几个对应的点的坐标</p><p>判断里这个点最近的三个点</p><p>三个点的顺序由序号越小对应的距离就越近</p><h5 id="2-python-代码"><a href="#2-python-代码" class="headerlink" title="2.python 代码"></a>2.python 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#读入文件</span></span><br><span class="line">file_path = <span class="string">&quot;data.txt&quot;</span></span><br><span class="line">df = pd.read_table(file_path, header=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义 x  y变量</span></span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义颜色变量</span></span><br><span class="line">color = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;w&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#用for循环将文件中的值赋值给x，y</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df[<span class="number">0</span>])):</span><br><span class="line">    x.append(<span class="built_in">int</span>(df[<span class="number">0</span>][i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]))</span><br><span class="line">    y.append(<span class="built_in">int</span>(df[<span class="number">0</span>][i].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">plt.scatter(x, y, c=color[<span class="number">2</span>], edgecolors=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">画一个散点图</span><br><span class="line">数据如下</span><br><span class="line"><span class="number">151</span>,<span class="number">54</span></span><br><span class="line"><span class="number">137</span>,<span class="number">55</span></span><br><span class="line"><span class="number">95</span>,<span class="number">66</span></span><br><span class="line"><span class="number">156</span>,<span class="number">91</span></span><br><span class="line"><span class="number">193</span>,<span class="number">101</span></span><br><span class="line"><span class="number">58</span>,<span class="number">104</span></span><br><span class="line"><span class="number">133</span>,<span class="number">105</span></span><br><span class="line"><span class="number">120</span>,<span class="number">118</span></span><br><span class="line"><span class="number">167</span>,<span class="number">136</span></span><br><span class="line"><span class="number">110</span>,<span class="number">149</span></span><br><span class="line"><span class="number">96</span>,<span class="number">174</span></span><br><span class="line"><span class="number">22</span>,<span class="number">184</span></span><br><span class="line"><span class="number">60</span>,<span class="number">193</span></span><br><span class="line"><span class="number">88</span>,<span class="number">198</span></span><br><span class="line"><span class="number">177</span>,<span class="number">202</span></span><br><span class="line"><span class="number">213</span>,<span class="number">235</span></span><br><span class="line"><span class="number">133</span>,<span class="number">249</span></span><br><span class="line"><span class="number">127</span>,<span class="number">255</span></span><br><span class="line"><span class="number">70</span>,<span class="number">257</span></span><br><span class="line"><span class="number">40</span>,<span class="number">273</span></span><br><span class="line"><span class="number">64</span>,<span class="number">271</span></span><br><span class="line"><span class="number">168</span>,<span class="number">286</span></span><br><span class="line"><span class="number">126</span>,<span class="number">325</span></span><br><span class="line"><span class="number">132</span>,<span class="number">335</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结论分析与体会"><a href="#结论分析与体会" class="headerlink" title="结论分析与体会"></a>结论分析与体会</h3><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙，这是Linux的一大亮点。</p><p>Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。</p><p>Linux的基本思想有两点：第一，一切都是文件；第二，每个文件都有确定的用途。其中第一条详细来讲就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux 操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（hexo github）搭建云平台</title>
      <link href="/2023/03/21/ok/"/>
      <url>/2023/03/21/ok/</url>
      
        <content type="html"><![CDATA[<h1 id="山东大学实验报告3-1"><a href="#山东大学实验报告3-1" class="headerlink" title="山东大学实验报告3-1"></a>山东大学实验报告3-1</h1><h2 id="山东大学-计算机科学与技术-学院"><a href="#山东大学-计算机科学与技术-学院" class="headerlink" title="山东大学  计算机科学与技术  学院"></a>山东大学  计算机科学与技术  学院</h2><h2 id="云计算技术-课程实验报告"><a href="#云计算技术-课程实验报告" class="headerlink" title="云计算技术  课程实验报告"></a>云计算技术  课程实验报告</h2><table><thead><tr><th align="left"><strong>学号：202000130199  |姓名：荆树吉 |  班级：20数据</strong></th></tr></thead><tbody><tr><td align="left"><strong>实验题目：利用云平台搭建个人博客</strong></td></tr><tr><td align="left">**实验学时：2|<strong>实验日期： 2023.3.15</strong></td></tr><tr><td align="left"><strong>实验目的：熟悉个人博客系统的搭建。<br>具体包括：<br>参考方案：注册Github账号，搭建Hexo环境并实现个人博客搭建，撰写实验报告。</strong></td></tr><tr><td align="left"><strong>硬件环境： <br>联网的计算机一台</strong></td></tr><tr><td align="left">**软件环境：<br>Windows **</td></tr><tr><td align="left"><strong>实验步骤与内容：</strong></td></tr><tr><td align="left">•    1.安装Git<br>•<strong>windows：</strong>到git官网上下载.exe文件,Download git,安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。<br>•2.安装Node.js<br>•<strong>windows：</strong>下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。<br>最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。<br>•3.安装Hexo<br>•前面git和nodejs安装好后，就可以安装hexo了，可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）<br>•定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，无视它就行<br>•npm install -g hexo-cli<br>•安装完后输入hexo -v验证是否安装成功。<br>•<br>•至此hexo就安装完了。<br>hexo init<br>这个Hexo可以自己取什么名字都行，然后，接着输入npm install安装必备的组件。<br><br>新建完成后，指定文件夹Hexo目录下有：<br><br>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题**<br>_config.yml: 博客的配置文件**<br>这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，<br> <br><img src="/2023/03/21/ok/1.png" alt="初始">•4.GitHub创建个人仓库<br>•打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93New">https://github.com/，新建一个项目仓库New</a> repository，如下所示：<br>• <br><img src="/2023/03/21/ok/2.png" alt="建仓库"><br>•生成SSH添加到GitHub，连接Github与本地。<br>•右键打开git bash，然后输入下面命令：<br>•git config –global user.name “yourname”<br>•git config –global user.email “youremail”<br>•注意：第一次使用git后需要将用户名和邮箱进行初始化<br>•<br>•这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。例如<br>•git config –global user.name “jsj12345”<br>•git config –global user.email <a href="mailto:&#x32;&#49;&#x31;&#x35;&#53;&#50;&#53;&#x38;&#x33;&#50;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#x32;&#49;&#x31;&#x35;&#53;&#50;&#53;&#x38;&#x33;&#50;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a><br>•可以用以下两条，检查一下你有没有输对<br>•git config user.name<br>•git config user.email<br>•然后创建SSH,一路回车<br>•ssh-keygen -t rsa -C “youremail”<br>•cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>•打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图：<br>• <br><img src="/2023/03/21/ok/3.png" alt="密钥">)在git bash输入ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>，如果如下图所示，出现你的用户名，那就成功了。<br>•6.将hexo部署到GitHub<br>•这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息<br>•修改最后一行的配置：<br>• deploy:<br>•  type: git<br>•  repository: <a href="https://github.com/jsj12345/jsj12345.github.io.git">https://github.com/jsj12345/jsj12345.github.io.git</a><br>•  branch: master<br>•repository修改为你自己的github项目地址即可就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。<br>•<br>•这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。<br>•npm install hexo-deployer-git –save<br>•hexo clean<br>•hexo generate<br>•hexo deploy<br>•<br>•7.设置个人域名<br>•可省略因为需要花钱，且意义不明显<br>•8.发布文章<br>•首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。<br>•<br>•然后输入hexo new post “我的第一篇博客”，新建一篇文章。<br>•<br>•然后打开D:\Hexo\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。<br>•你可以会直接在vscode里面编写markdown文件，可以实时预览，也可以用用其他编辑md文件的软件的工具编写。<br>•编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。<br>•<br>•到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。<br>个性化定制暂略</td></tr><tr><td align="left">结论分析与体会：Hexo是高效的静态网站生成框架，它基于Node.js，快速，简单且功能强大，是搭建博客的首选框架。通过Hexo，我们可以直接使用Markdown语法来撰写博客</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云平台搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
